// // Telegram Bot API integration
// interface ContactForm {
//   name: string
//   email: string
//   phone: string
//   projectType: string
//   message: string
// }

// export async function sendToTelegram(formData: ContactForm): Promise<void> {
//   // Replace with your actual bot token and chat ID
//   const BOT_TOKEN = "7251139888:AAFiNwGVceAoSYr6HSkwLbcaQoX6aoi42W8"
//   const CHAT_ID = "6536432455"

//   const message = `
// üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞!

// üë§ –ò–º—è: ${formData.name}
// üìß Email: ${formData.email}
// üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}
// üéØ –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞: ${formData.projectType}
// üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${formData.message}

// –í—Ä–µ–º—è: ${new Date().toLocaleString("ru-RU")}
//   `.trim()

//   // For demo purposes, we'll just log the message
//   // In a real project, you would send this to Telegram API
//   console.log("Sending to Telegram:", message)

//   // Simulate API call
//   await new Promise((resolve) => setTimeout(resolve, 1000))

//   // Uncomment and configure for real Telegram integration:
//   /*
//   const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
//     method: 'POST',
//     headers: {
//       'Content-Type': 'application/json',
//     },
//     body: JSON.stringify({
//       chat_id: CHAT_ID,
//       text: message,
//       parse_mode: 'HTML',
//     }),
//   })

//   if (!response.ok) {
//     throw new Error('Failed to send message to Telegram')
//   }
//   */
// }























// Telegram Bot API integration
interface ContactForm {
  name: string
  email: string
  phone: string
  projectType: string
  message: string
}

const BOT_TOKEN = "7251139888:AAFiNwGVceAoSYr6HSkwLbcaQoX6aoi42W8"
const CHAT_ID = "@CodeVibe_combot" // –ò–ª–∏ –≤–∞—à –ª–∏—á–Ω—ã–π chat ID

export async function sendToTelegram(formData: ContactForm): Promise<void> {
  const message = `
üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ DevTeam!*

üë§ *–ò–º—è:* ${formData.name}
üìß *Email:* ${formData.email}
üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${formData.phone || "–ù–µ —É–∫–∞–∑–∞–Ω"}
üéØ *–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞:* ${formData.projectType || "–ù–µ —É–∫–∞–∑–∞–Ω"}

üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ:*
${formData.message}

‚è∞ *–í—Ä–µ–º—è:* ${new Date().toLocaleString("ru-RU", {
    timeZone: "Asia/Tashkent",
  })}

---
–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å —Å–∞–π—Ç–∞: DevTeam
  `.trim()

  try {
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: CHAT_ID,
        text: message,
        parse_mode: "Markdown",
      }),
    })

    const result = await response.json()

    if (!response.ok) {
      console.error("Telegram API error:", result)
      throw new Error(`Telegram API error: ${result.description || "Unknown error"}`)
    }

    console.log("Message sent successfully to Telegram:", result)
  } catch (error) {
    console.error("Error sending message to Telegram:", error)
    throw new Error("Failed to send message to Telegram")
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –ø—Ä–æ–µ–∫—Ç–µ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
export async function notifyNewProject(projectTitle: string): Promise<void> {
  const message = `
üéâ *–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω!*

üìù *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${projectTitle}
‚è∞ *–í—Ä–µ–º—è:* ${new Date().toLocaleString("ru-RU", {
    timeZone: "Asia/Tashkent",
  })}

–ü—Ä–æ–µ–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Å–∞–π—Ç–∞ DevTeam.
  `.trim()

  try {
    await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: CHAT_ID,
        text: message,
        parse_mode: "Markdown",
      }),
    })
  } catch (error) {
    console.error("Error sending project notification:", error)
    // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
  }
}